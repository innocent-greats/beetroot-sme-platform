 server {

        root /var/www/umoja/admin.beetroot.greats.systems/html/build;
        index index.html index.htm index.nginx-debian.html;

        server_name admin.beetroot.greats.systems www.admin.beetroot.greats.systems;

        location / {
                try_files $uri /index.html$is_args$args =404;
        }
}

 sudo ln -s /etc/nginx/sites-available/admin.beetroot.greats.systems /etc/nginx/sites-enabled/



sudo nginx -t
systemctl restart nginx



sudo certbot --nginx -d admin.beetroot.greats.systems  -d www.admin.beetroot.greats.systems 


            // response.json().then(err => {
            //   console.log('err.message')
            //   console.log(err.message)
            //   reject(err.message);
            //   return { status : 102 , message: err.message }
            // }).catch(e => {
            //   reject(response.statusText);
            // });
            .then(data => {
            selfUser.setUserType(data);
            console.log('data')
            console.log(data)
              return resolve(data);
            }).catch(err => {
              toast.dismiss();
              toast.error(err);
            });


##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;
               index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

server {

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
                # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;
    server_name www.admin.beetroot.greats.systems admin.beetroot.greats.systems; # managed by Certbot


        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}


    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/admin.beetroot.greats.systems/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/admin.beetroot.greats.systems/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot






}
server {
    if ($host = www.admin.beetroot.greats.systems) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = admin.beetroot.greats.systems) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        listen 80 ;
        listen [::]:80 ;
    server_name www.admin.beetroot.greats.systems admin.beetroot.greats.systems;
    return 404; # managed by Certbot




}




                                            {/* <Grid item>
                                                <Stack direction="row" alignItems="center" spacing={1}>
                                                    <IconButton size="large">
                                                        <Dropzone onDrop={onDrop}>
                                                            {({ getRootProps, getInputProps }) => (
                                                            <div {...getRootProps()}>
                                                                <input {...getInputProps()} />
                                                            </div>
                                                            )}
                                                        </Dropzone>
                                                    </IconButton>
                                                </Stack>
                                            </Grid>   */}
                                                // state functions
    const retrieveImage = (e, cat) => {
        const data = e.target.files[0];
        const reader = new FileReader();
        reader.readAsArrayBuffer(data);
        reader.onloadend = () => {
          console.log("Buffer data: ", Buffer(reader.result));
        }
        console.log('useDisplayImage cat')
        console.log(cat)

        console.log('commodityState',commodityState)
        console.log('medicalCertificateState',medicalCertificateState)
        console.log('ownershipDeedState', ownershipDeedState)
        if(cat === 'commodityImage'){
            reader.onloadend = () => {
                updateState({commodityFile:Buffer(reader.result)});
                reader.addEventListener("load", (e) => {
                // updateState({commodityImage: reader.result});
                })
                reader.readAsDataURL(data);
            }
        }
        if(cat === 'medicalCertificateImage'){
            reader.onloadend = () => {
                updateState({medicalCertificateFile:Buffer(reader.result)});
                reader.addEventListener("load", (e) => {
                // updateState({medicalCertificateImage: reader.result});
                })
                reader.readAsDataURL(data);
                }
        }
        if(cat === 'ownershipDeedImage'){
            reader.onloadend = () => {
                updateState({ownershipDeedFile:Buffer(reader.result)});
                reader.addEventListener("load", (e) => {
                // updateState({ownershipDeedImage: reader.result});
                })
                reader.readAsDataURL(data);
                }
        }
        e.preventDefault();  
      }

                                      <Grid container  xs={12} md={6}>
                                    {generateBarCode ?
                                    // (<canvas ref={inputRef} />)
                                    (<></>)

                                    :(<AnimateButton>
                                            <Button 
                                                // disabled={!ownershipDeedIPFSHash && !commodityIPFSHash && !medicalCertificateIPFSHash }
                                                onClick={() => GenerateBarCode()}
                                                color="primary"
                                                variant="contained">Add New Commodity 
                                            </Button>
                                        </AnimateButton>
                                    )}
                                </Grid>